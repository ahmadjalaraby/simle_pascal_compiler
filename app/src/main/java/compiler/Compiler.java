/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compiler;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class PascalCompiler {
    // Define keywords
    private static final String[] KEYWORDS = {
            "PROGRAM", "DO", "VAR", "INTEGER", "WRITE", "BOOLEAN", "MOD",
            "<>", "-", "BEGIN", "DIV", ":=", "END", "READ", ";",
            "PROCEDURE", "AND", ",", "=", "IF", "OR", ":", "THEN", "NOT",
            ">", "ELSE", "OF", "<", "FOR", "ARRAY", "TRUE", ">=",
            "FALSE", "<=", "FUNCTION",
    };

    // Heres the escaping array
    private static final String[] ESCAPING_CHARACTER = {
            "\\*", "\\+", "\\.", "\\]", "\\[", "\\.\\.", "\\(", "\\)", "\\/", "\\-",
    };

    // Define token classifications
    private static final int KEYWORD = 0;
    private static final int NUM_CONST = 1;
    private static final int IDENT = 2;

    public static void main(String[] args) throws IOException {
        List<Token> tokens = new ArrayList<>();
        PascalCompiler obj = new PascalCompiler();

        // Here i want to check if the file is exist in the resource directory

        try {
            new File(obj.getClass().getResource("/p.txt").getFile());
        } catch (Exception e) {
            System.out.println("File not found!");
        }

        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(obj.getClass().getResourceAsStream("/p.txt")))) {
            String line;
            int lineNumber = 0;

            while ((line = br.readLine()) != null) {
                lineNumber++;

                if (line.isEmpty()) {
                    continue;
                }

                line = line.trim().toUpperCase();
                // System.out.println("Line: " + line);

                Pattern pattern = Pattern
                        .compile("\\b(" + String.join("|", KEYWORDS) +
                                ")\\b|([0-9]+)|([a-zA-Z][a-zA-Z0-9]*)|(\\:\\=)|(=)|(>=)|(<=)|(<>)|([,;:])" +
                                "|([" + String.join("|", ESCAPING_CHARACTER) + "])");
                Matcher matcher = pattern.matcher(line);

                while (matcher.find()) {
                    String tokenValue = matcher.group();
                    // System.out.println("ValueToken: " + tokenValue);
                    int tokenClassification = IDENT;

                    if (Arrays.asList(KEYWORDS).contains(tokenValue)
                            || Arrays.asList(ESCAPING_CHARACTER).contains("\\" + tokenValue)) {
                        tokenClassification = KEYWORD;
                    } else if (tokenValue.matches("[0-9]+")) {
                        tokenClassification = NUM_CONST;
                    }
                    Token token = new Token(tokenValue, tokenClassification, lineNumber);
                    tokens.add(token);
                    System.out.printf("Token: Name %s Type: %s, Classification: %d, Line: %d\n", tokenValue,
                            token.getType(), tokenClassification,
                            lineNumber);
                }
            }

            new SyntaxAnalyzer(tokens);
        }
    }
}